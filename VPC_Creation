#######################  This text file will help you with the AWS CLI commands to create VPC.  ###################

##Sunday March 22 13:38:32 IST 2020
##purpose ## AWS CLI Commands to create VPC and to launch Instances. ##
##Created by Nikhil Kulkarni ###


###################################################################################################################



Step 1: Create a VPC. (Change the CIDR block as per your requirement). Note Down the VPC ID.
>>aws ec2 create-vpc --cidr-block 10.10.0.0/16
Output::
{
    "Vpc": {
        "CidrBlock": "10.10.0.0/16",
        "DhcpOptionsId": "dopt-092feba3bcc9c229c",
        "State": "pending",
        "VpcId": "vpc-IDXXXX",
        "OwnerId": "XXXX-XXXX",
        "InstanceTenancy": "default",
        "Ipv6CidrBlockAssociationSet": [],
        "CidrBlockAssociationSet": [
            {
                "AssociationId": "vpc-cidr-assoc-0c8befbed521745bc",
                "CidrBlock": "10.10.0.0/16",
                "CidrBlockState": {
                    "State": "associated"
                }
            }
        ],
        "IsDefault": false,
        "Tags": []
    }
}


Add tages to your newly created VPC.
>>aws ec2 create-tags --resources vpc-IDXXXX --tags 'Key="name",Value=MyVPC'


Check you VPC.
>>aws ec2 describe-vpcs --vpc-id vpc-IDXXXX 

output::

{
    "Vpcs": [
        {
            "CidrBlock": "10.10.0.0/16",
            "DhcpOptionsId": "dopt-092feba3bcc9c229c",
            "State": "available",
            "VpcId": "vpc-IDXXXX",
            "OwnerId": "XXXX-XXXX",
            "InstanceTenancy": "default",
            "CidrBlockAssociationSet": [
                {
                    "AssociationId": "vpc-cidr-assoc-0c8befbed521745bc",
                    "CidrBlock": "10.10.0.0/16",
                    "CidrBlockState": {
                        "State": "associated"
                    }
                }
            ],
            "IsDefault": false,
            "Tags": [
                {
                    "Key": "name",
                    "Value": "MyVPC"
                }
            ]
        }
    ]
}



Step 2: Create Internet Gateway (Note down the Internet Gateway ID)
>>aws ec2 create-internet-gateway
output::
{
    "InternetGateway": {
        "Attachments": [],
        "InternetGatewayId": "igw-IDXXXX",
        "Tags": []
    }
}


Add Tages to Internet Gateway
>>aws ec2 create-tags --resources igw-IDXXXX --tags 'Key="name",Value=MyIG'


Attache Internet Gateway to created VPC::
>>aws ec2 attach-internet-gateway --vpc-id vpc-IDXXXX --internet-gateway-id igw-IDXXXX


Check your Internet Gateway.
>>aws ec2 describe-internet-gateways --internet-gateway-id igw-IDXXXX 
Output::

{
    "InternetGateways": [
        {
            "Attachments": [
                {
                    "State": "available",
                    "VpcId": "vpc-IDXXXX"
                }
            ],
            "InternetGatewayId": "igw-IDXXXX",
            "OwnerId": "XXXX-XXXX",
            "Tags": []
        }
    ]
}






Step 3: Create Subnet (replce AZ as per your choice)
>>aws ec2 create-subnet --vpc-id vpc-IDXXXX --cidr-block 10.10.2.0/24 --availability-zone ap-south-1a
output::
{
    "Subnet": {
        "AvailabilityZone": "ap-south-1a",
        "AvailabilityZoneId": "aps1-az1",
        "AvailableIpAddressCount": 251,
        "CidrBlock": "10.10.2.0/24",
        "DefaultForAz": false,
        "MapPublicIpOnLaunch": false,
        "State": "pending",
        "SubnetId": "subnet-IDXXXX",
        "VpcId": "vpc-IDXXXX",
        "OwnerId": "XXXX-XXXX",
        "AssignIpv6AddressOnCreation": false,
        "Ipv6CidrBlockAssociationSet": [],
        "SubnetArn": "arn:aws:ec2:ap-south-1:XXXX-XXXX:subnet/subnet-IDXXXX"
    }
}



Add Tags to Internet Gateway
>>aws ec2 create-tags --resources subnet-IDXXXX --tags 'Key="name",Value=Public_Subnet'




Step 4:: Create a route table. (custom)::
>>aws ec2 create-route-table --vpc-id vpc-IDXXXX
Output::

{
    "RouteTable": {
        "Associations": [],
        "PropagatingVgws": [],
        "RouteTableId": "rtb-IDXXXX",
        "Routes": [
            {
                "DestinationCidrBlock": "10.10.0.0/16",
                "GatewayId": "local",
                "Origin": "CreateRouteTable",
                "State": "active"
            }
        ],
        "Tags": [],
        "VpcId": "vpc-IDXXXX",
        "OwnerId": "XXXX-XXXX"
    }
}



Add Tags to Route Table.
>>aws ec2 create-tags --resources rtb-IDXXXX --tags 'Key="name",Value=MyRouteTable'




Add routs in route table.::
>>aws ec2 create-route --route-table-id rtb-IDXXXX --destination-cidr-block 0.0.0.0/0 --gateway-id igw-IDXXXX
Output::

                                                                                                                                                     {
    "Return": true
}



Verify route table::
>>aws ec2 describe-route-tables --route-table-id rtb-IDXXXX
Output::

{
    "RouteTables": [
        {
            "Associations": [],
            "PropagatingVgws": [],
            "RouteTableId": "rtb-IDXXXX",
            "Routes": [
                {
                    "DestinationCidrBlock": "10.10.0.0/16",
                    "GatewayId": "local",
                    "Origin": "CreateRouteTable",
                    "State": "active"
                },
                {
                    "DestinationCidrBlock": "0.0.0.0/0",
                    "GatewayId": "igw-IDXXXX",
                    "Origin": "CreateRoute",
                    "State": "active"
                }
            ],
            "Tags": [],
            "VpcId": "vpc-IDXXXX",
            "OwnerId": "XXXX-XXXX"
        }
    ]
}



Add subnet to route table::
>>aws ec2 associate-route-table  --subnet-id subnet-IDXXXX --route-table-id rtb-IDXXXX
Output::

{
    "AssociationId": "rtbassoc-IDXXXX",
    "AssociationState": {
        "State": "associated"
    }
}




Enable Public IP on subnet level.::
>>aws ec2 modify-subnet-attribute --subnet-id subnet-IDXXXX --map-public-ip-on-launch



Step 5:: Cretae a security group::
>>aws ec2 create-security-group --group-name SSHAccess --description "Security group for SSH access" --vpc-id vpc-IDXXXX
Output::
                                                                                                                                                     {
    "GroupId": "sg-IDXXXX"
}



Add Tags to Security Group.
>>aws ec2 create-tags --resources sg-IDXXXX --tags 'Key="name",Value=MySecurityGroup'



Security Group all SHH::
>>aws ec2 authorize-security-group-ingress --group-id sg-IDXXXX --protocol tcp --port 22 --cidr 0.0.0.0/0



Command to create key pair
>>aws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > MyKeyPair.pem
Output: Key pair will be created/download at current location.

############################################################################################################################

Launch an Instance into newly created VPC.

Launch an instance with custome Volume size.::
>>aws ec2 run-instances --image-id ami-03b5297d565ef30a6 --instance-type t2.micro --block-device-mappings 'DeviceName=/dev/xvda,Ebs={VolumeSize=30}' --key-name MyKeyPair --security-group-ids sg-IDXXXX --subnet-id subnet-IDXXXX


Output::

{
    "Groups": [],
    "Instances": [
        {
            "AmiLaunchIndex": 0,
            "ImageId": "ami-03b5297d565ef30a6",
            "InstanceId": "i-IDXXXX",
            "InstanceType": "t2.micro",
            "KeyName": "MyKeyPair",
            "LaunchTime": "2020-03-22T07:32:16.000Z",
            "Monitoring": {
                "State": "disabled"
            },
            "Placement": {
                "AvailabilityZone": "ap-south-1a",
                "GroupName": "",
                "Tenancy": "default"
            },
            "PrivateDnsName": "ip-10-10-2-4.ap-south-1.compute.internal",
            "PrivateIpAddress": "10.10.2.4",
            "ProductCodes": [],
            "PublicDnsName": "",
            "State": {
                "Code": 0,
                "Name": "pending"
            },
            "StateTransitionReason": "",
            "SubnetId": "subnet-IDXXXX",
            "VpcId": "vpc-IDXXXX",
            "Architecture": "x86_64",
            "BlockDeviceMappings": [],
            "ClientToken": "",
            "EbsOptimized": false,
            "Hypervisor": "xen",
            "NetworkInterfaces": [
                {
                    "Attachment": {
                        "AttachTime": "2020-03-22T07:32:16.000Z",
                        "AttachmentId": "eni-attach-IDXXXX",
                        "DeleteOnTermination": true,
                        "DeviceIndex": 0,
                        "Status": "attaching"
                    },
                    "Description": "",
                    "Groups": [
                        {
                            "GroupName": "SSHAccess",
                            "GroupId": "sg-IDXXXX"
                        }
                    ],
                    "Ipv6Addresses": [],
                    "MacAddress": "02:0b:e9:49:60:9a",
                    "NetworkInterfaceId": "eni-IDXXXX",
                    "OwnerId": "XXXX-XXXX",
                    "PrivateIpAddress": "10.10.2.4",
                    "PrivateIpAddresses": [
                        {
                            "Primary": true,
                            "PrivateIpAddress": "10.10.2.4"
                        }
                    ],
                    "SourceDestCheck": true,
                    "Status": "in-use",
                    "SubnetId": "subnet-IDXXXX",
                    "VpcId": "vpc-IDXXXX",
                    "InterfaceType": "interface"
                }
            ],
            "RootDeviceName": "/dev/xvda",
            "RootDeviceType": "ebs",
            "SecurityGroups": [
                {
                    "GroupName": "SSHAccess",
                    "GroupId": "sg-IDXXXX"
                }
            ],
            "SourceDestCheck": true,
            "StateReason": {
                "Code": "pending",
                "Message": "pending"
            },
            "VirtualizationType": "hvm",
            "CpuOptions": {
                "CoreCount": 1,
                "ThreadsPerCore": 1
            },
            "CapacityReservationSpecification": {
                "CapacityReservationPreference": "open"
            },
            "MetadataOptions": {
                "State": "pending",
                "HttpTokens": "optional",
                "HttpPutResponseHopLimit": 1,
                "HttpEndpoint": "enabled"
            }
        }
    ],
    "OwnerId": "XXXX-XXXX",
    "ReservationId": "r-IDXXXX"
}


>>aws ec2 describe-instances --instance-id i-IDXXXX
Output::

{
    "Reservations": [
        {
            "Groups": [],
            "Instances": [
                {
                    "AmiLaunchIndex": 0,
                    "ImageId": "ami-03b5297d565ef30a6",
                    "InstanceId": "i-IDXXXX",
                    "InstanceType": "t2.micro",
                    "KeyName": "MyKeyPair",
                    "LaunchTime": "2020-03-22T07:32:16.000Z",
                    "Monitoring": {
                        "State": "disabled"
                    },
                    "Placement": {
                        "AvailabilityZone": "ap-south-1a",
                        "GroupName": "",
                        "Tenancy": "default"
                    },
                    "PrivateDnsName": "ip-10-10-2-4.ap-south-1.compute.internal",
                    "PrivateIpAddress": "10.10.2.4",
                    "ProductCodes": [],
                    "PublicDnsName": "",
                    "PublicIpAddress": "13.XX.XX.XX",
                    "State": {
                        "Code": 16,
                        "Name": "running"
                    },
                    "StateTransitionReason": "",
                    "SubnetId": "subnet-IDXXXX",
                    "VpcId": "vpc-IDXXXX",
                    "Architecture": "x86_64",
                    "BlockDeviceMappings": [
                        {
                            "DeviceName": "/dev/xvda",
                            "Ebs": {
                                "AttachTime": "2020-03-22T07:32:17.000Z",
                                "DeleteOnTermination": true,
                                "Status": "attached",
                                "VolumeId": "vol-IDXXXX"
                            }
                        }
                    ],
                    "ClientToken": "",
                    "EbsOptimized": false,
                    "EnaSupport": true,
                    "Hypervisor": "xen",
                    "NetworkInterfaces": [
                        {
                            "Association": {
                                "IpOwnerId": "amazon",
                                "PublicDnsName": "",
                                "PublicIp": "13.233.53.9"
                            },
                            "Attachment": {
                                "AttachTime": "2020-03-22T07:32:16.000Z",
                                "AttachmentId": "eni-attach-IDXXXX",
                                "DeleteOnTermination": true,
                                "DeviceIndex": 0,
                                "Status": "attached"
                            },
                            "Description": "",
                            "Groups": [
                                {
                                    "GroupName": "SSHAccess",
                                    "GroupId": "sg-IDXXXX"
                                }
                            ],
                            "Ipv6Addresses": [],
                            "MacAddress": "02:0b:XX:XX:XX:XX",
                            "NetworkInterfaceId": "eni-IDXXXX",
                            "OwnerId": "XXXX-XXXX",
                            "PrivateIpAddress": "10.10.2.4",
                            "PrivateIpAddresses": [
                                {
                                    "Association": {
                                        "IpOwnerId": "amazon",
                                        "PublicDnsName": "",
                                        "PublicIp": "13.XX.XX.XX"
                                    },
                                    "Primary": true,
                                    "PrivateIpAddress": "10.10.2.4"
                                }
                            ],
                            "SourceDestCheck": true,
                            "Status": "in-use",
                            "SubnetId": "subnet-IDXXXX",
                            "VpcId": "vpc-IDXXXX",
                            "InterfaceType": "interface"
                        }
                    ],
                    "RootDeviceName": "/dev/xvda",
                    "RootDeviceType": "ebs",
                    "SecurityGroups": [
                        {
                            "GroupName": "SSHAccess",
                            "GroupId": "sg-IDXXXX"
                        }
                    ],
                    "SourceDestCheck": true,
                    "VirtualizationType": "hvm",
                    "CpuOptions": {
                        "CoreCount": 1,
                        "ThreadsPerCore": 1
                    },
                    "CapacityReservationSpecification": {
                        "CapacityReservationPreference": "open"
                    },
                    "HibernationOptions": {
                        "Configured": false
                    },
                    "MetadataOptions": {
                        "State": "applied",
                        "HttpTokens": "optional",
                        "HttpPutResponseHopLimit": 1,
                        "HttpEndpoint": "enabled"
                    }
                }
            ],
            "OwnerId": "XXXX-XXXX",
            "ReservationId": "r-IDXXXX"
        }
    ]
}



Login to your instance::
#ssh -i <keyfile.pem> ec2-user@Instance_Public_IP


Command to Stop and Terminate the AWS instance.
>>aws ec2 start-instances --instance-id i-IDXXXX
Output::

{
    "StoppingInstances": [
        {
            "CurrentState": {
                "Code": 64,
                "Name": "stopping"
            },
            "InstanceId": "i-IDXXXX",
            "PreviousState": {
                "Code": 16,
                "Name": "running"
            }
        }
    ]
}


Command to Terminate an Instance.

>>aws ec2 terminate-instances --instance-id i-IDXXXX
Output::

{
    "TerminatingInstances": [
        {
            "CurrentState": {
                "Code": 48,
                "Name": "terminated"
            },
            "InstanceId": "i-IDXXXX",
            "PreviousState": {
                "Code": 80,
                "Name": "stopped"
            }
        }
    ]
}


#############################################################################################################################


Commands to Delete VPC resources.

Step1: Delete Subnet::
>>aws ec2 delete-subnet --subnet-id vpc-IDXXXX


Step 2: Delete Security Group.
>>aws ec2 delete-security-group --group-id sg-IDXXXX


Step 3: Delete Route Table:
>>aws ec2 delete-route-table --route-table-id rtb-IDXXXX


Step 4: Detach internet gateway from VPC and delete an Internet Gateway.
>>aws ec2 detach-internet-gateway --gateway-id igw-IDXXXX
>>aws ec2 delete-internet-gateway --gateway-id igw-IDXXXX


Step 5:: Delete VPC (Deleting VPC will delete every resources associated with it)
>>aws ec2 delete-vpc --vpc-id vpc-IDXXXX

